//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.UI.Composition.idl";
import "Microsoft.UI.Xaml.idl";
import "Windows.UI.idl";

// Forward Declare
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            runtimeclass CompositionIsland;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            apicontract WinUIContract;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        typedef struct Color Color;
    }
}
namespace Microsoft
{
    namespace UI
    {
        apicontract LiftedContract;

        interface IColorHelper;

        interface IColorHelperStatics;

        interface IColorHelperStatics2;

        interface IColors;

        interface IColorsStatics;

        interface IContentAutomation;

        interface IContentAutomationProviderRequestedEventArgs;

        interface IContentAutomationStatics;

        interface IUIContentRoot;

        interface IUIContentRootFactory;

        interface IUIContentRootPartner;

        interface IUIContentRoot_ContentAutomation;

        runtimeclass ColorHelper;

        runtimeclass Colors;

        runtimeclass ContentAutomation;

        runtimeclass ContentAutomationProviderRequestedEventArgs;

        runtimeclass UIContentRoot;
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace UI
    {
        declare
        {
            interface Windows.Foundation.TypedEventHandler<Microsoft.UI.ContentAutomation*, Microsoft.UI.ContentAutomationProviderRequestedEventArgs*>;
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace UI
    {
        [contractversion(1.0)]
        apicontract LiftedContract
        {
        }

        [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
        [exclusiveto(Microsoft.UI.ColorHelper)]
        [uuid(3ADDDCCD-3949-585B-A566-CCB8350DD221)]
        interface IColorHelper : IInspectable
        {
        }

        [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
        [exclusiveto(Microsoft.UI.ColorHelper)]
        [uuid(1D1D85A1-EB63-538A-84F0-019210BC406B)]
        interface IColorHelperStatics : IInspectable
        {
            HRESULT FromArgb([in] BYTE a, [in] BYTE r, [in] BYTE g, [in] BYTE b, [out] [retval] Windows.UI.Color* result);
        }

        [contract(Microsoft.UI.Xaml.WinUIContract, 4.0)]
        [exclusiveto(Microsoft.UI.ColorHelper)]
        [uuid(982A2D93-0EC4-56B7-9C20-0B5C77949066)]
        interface IColorHelperStatics2 : IInspectable
        {
            HRESULT ToDisplayName([in] Windows.UI.Color color, [out] [retval] HSTRING* result);
        }

        [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
        [exclusiveto(Microsoft.UI.Colors)]
        [uuid(8CF15863-8411-5AFD-946C-328E04DA2F2F)]
        interface IColors : IInspectable
        {
        }

        [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
        [exclusiveto(Microsoft.UI.Colors)]
        [uuid(8620A5B0-015A-57AC-A3F3-895D0B1269AE)]
        interface IColorsStatics : IInspectable
        {
            [propget] HRESULT AliceBlue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT AntiqueWhite([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Aqua([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Aquamarine([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Azure([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Beige([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Bisque([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Black([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT BlanchedAlmond([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Blue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT BlueViolet([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Brown([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT BurlyWood([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT CadetBlue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Chartreuse([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Chocolate([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Coral([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT CornflowerBlue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Cornsilk([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Crimson([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Cyan([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DarkBlue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DarkCyan([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DarkGoldenrod([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DarkGray([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DarkGreen([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DarkKhaki([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DarkMagenta([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DarkOliveGreen([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DarkOrange([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DarkOrchid([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DarkRed([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DarkSalmon([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DarkSeaGreen([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DarkSlateBlue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DarkSlateGray([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DarkTurquoise([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DarkViolet([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DeepPink([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DeepSkyBlue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DimGray([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT DodgerBlue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Firebrick([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT FloralWhite([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT ForestGreen([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Fuchsia([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Gainsboro([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT GhostWhite([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Gold([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Goldenrod([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Gray([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Green([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT GreenYellow([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Honeydew([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT HotPink([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT IndianRed([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Indigo([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Ivory([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Khaki([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Lavender([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT LavenderBlush([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT LawnGreen([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT LemonChiffon([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT LightBlue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT LightCoral([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT LightCyan([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT LightGoldenrodYellow([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT LightGreen([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT LightGray([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT LightPink([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT LightSalmon([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT LightSeaGreen([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT LightSkyBlue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT LightSlateGray([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT LightSteelBlue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT LightYellow([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Lime([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT LimeGreen([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Linen([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Magenta([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Maroon([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT MediumAquamarine([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT MediumBlue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT MediumOrchid([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT MediumPurple([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT MediumSeaGreen([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT MediumSlateBlue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT MediumSpringGreen([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT MediumTurquoise([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT MediumVioletRed([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT MidnightBlue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT MintCream([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT MistyRose([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Moccasin([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT NavajoWhite([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Navy([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT OldLace([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Olive([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT OliveDrab([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Orange([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT OrangeRed([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Orchid([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT PaleGoldenrod([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT PaleGreen([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT PaleTurquoise([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT PaleVioletRed([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT PapayaWhip([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT PeachPuff([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Peru([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Pink([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Plum([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT PowderBlue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Purple([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Red([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT RosyBrown([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT RoyalBlue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT SaddleBrown([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Salmon([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT SandyBrown([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT SeaGreen([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT SeaShell([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Sienna([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Silver([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT SkyBlue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT SlateBlue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT SlateGray([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Snow([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT SpringGreen([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT SteelBlue([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Tan([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Teal([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Thistle([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Tomato([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Transparent([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Turquoise([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Violet([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Wheat([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT White([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT WhiteSmoke([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT Yellow([out] [retval] Windows.UI.Color* value);
            [propget] HRESULT YellowGreen([out] [retval] Windows.UI.Color* value);
        }

        [contract(Microsoft.UI.LiftedContract, 1.0)]
        [exclusiveto(Microsoft.UI.ContentAutomation)]
        [experimental]
        [uuid(DFA2BDCA-CBE1-53B5-B486-079B9ABFE444)]
        interface IContentAutomation : IInspectable
        {
            [propget] HRESULT AutomationHostProvider([out] [retval] IInspectable** value);
            [eventadd] HRESULT AutomationProviderRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.ContentAutomation*, Microsoft.UI.ContentAutomationProviderRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
            [eventremove] HRESULT AutomationProviderRequested([in] EventRegistrationToken token);
        }

        [contract(Microsoft.UI.LiftedContract, 1.0)]
        [exclusiveto(Microsoft.UI.ContentAutomationProviderRequestedEventArgs)]
        [experimental]
        [uuid(E3546970-06AD-5095-9590-FEE5D5241E49)]
        interface IContentAutomationProviderRequestedEventArgs : IInspectable
        {
            [propget] HRESULT AutomationProvider([out] [retval] IInspectable** value);
            [propput] HRESULT AutomationProvider([in] IInspectable* value);
            [propget] HRESULT Handled([out] [retval] boolean* value);
            [propput] HRESULT Handled([in] boolean value);
        }

        [contract(Microsoft.UI.LiftedContract, 1.0)]
        [exclusiveto(Microsoft.UI.ContentAutomation)]
        [experimental]
        [uuid(5B520E50-FA18-5105-94FD-C9A8BCEE57F1)]
        interface IContentAutomationStatics : IInspectable
        {
            HRESULT CreateForContent([in] Microsoft.UI.UIContentRoot* content, [out] [retval] Microsoft.UI.ContentAutomation** result);
        }

        [contract(Microsoft.UI.LiftedContract, 1.0)]
        [exclusiveto(Microsoft.UI.UIContentRoot)]
        [experimental]
        [uuid(F47C106F-C5DD-56D1-92C0-90861A2F7287)]
        interface IUIContentRoot : IInspectable
        {
        }

        [contract(Microsoft.UI.LiftedContract, 1.0)]
        [exclusiveto(Microsoft.UI.UIContentRoot)]
        [experimental]
        [uuid(A9C562D7-4298-5DA9-8150-D777B532CC4D)]
        interface IUIContentRootFactory : IInspectable
        {
            HRESULT CreateInstance([in] Microsoft.UI.Composition.CompositionIsland* island, [in] IInspectable* inputSite, [out] [retval] Microsoft.UI.UIContentRoot** value);
        }

        [contract(Microsoft.UI.LiftedContract, 1.0)]
        [exclusiveto(Microsoft.UI.UIContentRoot)]
        [experimental]
        [uuid(1A77AE47-6810-52A8-95C4-F92F1F0758A7)]
        interface IUIContentRootPartner : IInspectable
        {
            [propget] HRESULT InputSite([out] [retval] IInspectable** value);
            [propget] HRESULT Island([out] [retval] Microsoft.UI.Composition.CompositionIsland** value);
        }

        [contract(Microsoft.UI.LiftedContract, 1.0)]
        [exclusiveto(Microsoft.UI.UIContentRoot)]
        [experimental]
        [uuid(A78CEA0C-7CC5-592E-B628-E21F5111DEB2)]
        interface IUIContentRoot_ContentAutomation : IInspectable
        {
            [propget] HRESULT Automation([out] [retval] Microsoft.UI.ContentAutomation** value);
        }

        [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
        [marshaling_behavior(agile)]
        [static(Microsoft.UI.IColorHelperStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
        [static(Microsoft.UI.IColorHelperStatics2, Microsoft.UI.Xaml.WinUIContract, 4.0)]
        [threading(both)]
        runtimeclass ColorHelper
        {
            [default] interface Microsoft.UI.IColorHelper;
        }

        [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
        [marshaling_behavior(agile)]
        [static(Microsoft.UI.IColorsStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
        [threading(both)]
        runtimeclass Colors
        {
            [default] interface Microsoft.UI.IColors;
        }

        [contract(Microsoft.UI.LiftedContract, 1.0)]
        [experimental]
        [marshaling_behavior(agile)]
        [static(Microsoft.UI.IContentAutomationStatics, Microsoft.UI.LiftedContract, 1.0)]
        [threading(both)]
        runtimeclass ContentAutomation
        {
            [default] [experimental] interface Microsoft.UI.IContentAutomation;
        }

        [contract(Microsoft.UI.LiftedContract, 1.0)]
        [experimental]
        [marshaling_behavior(agile)]
        runtimeclass ContentAutomationProviderRequestedEventArgs
        {
            [default] [experimental] interface Microsoft.UI.IContentAutomationProviderRequestedEventArgs;
        }

        [activatable(Microsoft.UI.IUIContentRootFactory, Microsoft.UI.LiftedContract, 1.0)]
        [contract(Microsoft.UI.LiftedContract, 1.0)]
        [experimental]
        [marshaling_behavior(agile)]
        [threading(both)]
        runtimeclass UIContentRoot
        {
            [default] [experimental] interface Microsoft.UI.IUIContentRoot;
            [contract(Microsoft.UI.LiftedContract, 1.0)] [experimental] interface Microsoft.UI.IUIContentRootPartner;
            [contract(Microsoft.UI.LiftedContract, 1.0)] [experimental] interface Microsoft.UI.IUIContentRoot_ContentAutomation;
        }
    }
}
