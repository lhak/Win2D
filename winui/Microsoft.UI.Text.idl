//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.Storage.Streams.idl";
import "Windows.UI.idl";
import "Windows.UI.Text.idl";

// Forward Declare
namespace Windows
{
    namespace Foundation
    {
        typedef struct Point Point;

        typedef struct Rect Rect;
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            interface IRandomAccessStream;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        typedef struct Color Color;
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Text
        {
            typedef enum FontStretch FontStretch;

            typedef enum FontStyle FontStyle;

            typedef struct FontWeight FontWeight;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Text
        {
            typedef enum CaretType CaretType;

            typedef enum FindOptions FindOptions;

            typedef enum FormatEffect FormatEffect;

            typedef enum HorizontalCharacterAlignment HorizontalCharacterAlignment;

            typedef enum LetterCase LetterCase;

            typedef enum LineSpacingRule LineSpacingRule;

            typedef enum LinkType LinkType;

            typedef enum MarkerAlignment MarkerAlignment;

            typedef enum MarkerStyle MarkerStyle;

            typedef enum MarkerType MarkerType;

            typedef enum ParagraphAlignment ParagraphAlignment;

            typedef enum ParagraphStyle ParagraphStyle;

            typedef enum PointOptions PointOptions;

            typedef enum RangeGravity RangeGravity;

            typedef enum RichEditMathMode RichEditMathMode;

            typedef enum SelectionOptions SelectionOptions;

            typedef enum SelectionType SelectionType;

            typedef enum TabAlignment TabAlignment;

            typedef enum TabLeader TabLeader;

            typedef enum TextGetOptions TextGetOptions;

            typedef enum TextRangeUnit TextRangeUnit;

            typedef enum TextScript TextScript;

            typedef enum TextSetOptions TextSetOptions;

            typedef enum UnderlineType UnderlineType;

            typedef enum VerticalCharacterAlignment VerticalCharacterAlignment;

            interface IFontWeights;

            interface IFontWeightsStatics;

            interface ITextCharacterFormat;

            interface ITextConstantsStatics;

            interface ITextDocument;

            interface ITextParagraphFormat;

            interface ITextRange;

            interface ITextSelection;

            runtimeclass FontWeights;

            runtimeclass RichEditTextDocument;

            runtimeclass RichEditTextRange;

            runtimeclass TextConstants;
        }
    }
}

// Generic instantiations

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Text
        {
            [version(0x00000001)]
            enum CaretType
            {
                Normal_d = 0,
                Null_d = 1
            };

            [flags]
            [version(0x00000001)]
            enum FindOptions
            {
                None_d = 0x0,
                Word_d = 0x2,
                Case_d = 0x4
            };

            [version(0x00000001)]
            enum FormatEffect
            {
                Off_d = 0,
                On_d = 1,
                Toggle_d = 2,
                Undefined_d = 3
            };

            [version(0x00000001)]
            enum HorizontalCharacterAlignment
            {
                Left_d = 0,
                Right_d = 1,
                Center_d = 2
            };

            [version(0x00000001)]
            enum LetterCase
            {
                Lower_d = 0,
                Upper_d = 1
            };

            [version(0x00000001)]
            enum LineSpacingRule
            {
                Undefined_d = 0,
                Single_d = 1,
                OneAndHalf_d = 2,
                Double_d = 3,
                AtLeast_d = 4,
                Exactly_d = 5,
                Multiple_d = 6,
                Percent_d = 7
            };

            [version(0x00000001)]
            enum LinkType
            {
                Undefined_d = 0,
                NotALink_d = 1,
                ClientLink_d = 2,
                FriendlyLinkName_d = 3,
                FriendlyLinkAddress_d = 4,
                AutoLink_d = 5,
                AutoLinkEmail_d = 6,
                AutoLinkPhone_d = 7,
                AutoLinkPath_d = 8
            };

            [version(0x00000001)]
            enum MarkerAlignment
            {
                Undefined_d = 0,
                Left_d = 1,
                Center_d = 2,
                Right_d = 3
            };

            [version(0x00000001)]
            enum MarkerStyle
            {
                Undefined_d = 0,
                Parenthesis_d = 1,
                Parentheses_d = 2,
                Period_d = 3,
                Plain_d = 4,
                Minus_d = 5,
                NoNumber_d = 6
            };

            [version(0x00000001)]
            enum MarkerType
            {
                Undefined_d = 0,
                None_d = 1,
                Bullet_d = 2,
                Arabic_d = 3,
                LowercaseEnglishLetter_d = 4,
                UppercaseEnglishLetter_d = 5,
                LowercaseRoman_d = 6,
                UppercaseRoman_d = 7,
                DeActUnicodeSequence        = 8,
                DeActCircledNumber          = 9,
                DeActBlackCircleWingding    = 10,
                DeActWhiteCircleWingding    = 11,
                DeActArabicWide             = 12,
                DeActSimplifiedChinese      = 13,
                DeActTraditionalChinese     = 14,
                DeActJapanSimplifiedChinese = 15,
                DeActJapanKorea             = 16,
                DeActArabicDictionary       = 17,
                DeActArabicAbjad            = 18,
                DeActHebrew                 = 19,
                DeActThaiAlphabetic         = 20,
                DeActThaiNumeric            = 21,
                DeActDevanagariVowel        = 22,
                DeActDevanagariConsonant    = 23,
                DeActDevanagariNumeric      = 24
            };

            [version(0x00000001)]
            enum ParagraphAlignment
            {
                DeActUndefined = 0,
                DeActLeft      = 1,
                DeActCenter    = 2,
                DeActRight     = 3,
                DeActJustify   = 4
            };

            [version(0x00000001)]
            enum ParagraphStyle
            {
                DeActUndefined = 0,
                DeActNone      = 1,
                DeActDeActNormal    = 2,
                DeActHeading1  = 3,
                DeActHeading2  = 4,
                DeActHeading3  = 5,
                DeActHeading4  = 6,
                DeActHeading5  = 7,
                DeActHeading6  = 8,
                DeActHeading7  = 9,
                DeActHeading8  = 10,
                DeActHeading9  = 11
            };

            [flags]
            [version(0x00000001)]
            enum PointOptions
            {
                DeActNone               = 0x0,
                DeActIncludeInset       = 0x1,
                DeActStart              = 0x20,
                DeActClientCoordinates  = 0x100,
                DeActAllowOffClient     = 0x200,
                DeActTransform          = 0x400,
                DeActNoHorizontalScroll = 0x10000,
                DeActNoVerticalScroll   = 0x40000
            };

            [version(0x00000001)]
            enum RangeGravity
            {
                DeActUIBehavior = 0,
                DeActBackward   = 1,
                DeActForward    = 2,
                DeActInward     = 3,
                DeActOutward    = 4
            };

            [version(0x00000001)]
            enum RichEditMathMode
            {
                DeActNoMath   = 0,
                DeActMathOnly = 1
            };

            [flags]
            [version(0x00000001)]
            enum SelectionOptions
            {
                DeActStartActive = 0x1,
                DeActAtEndOfLine = 0x2,
                DeActOvertype    = 0x4,
                DeActActive      = 0x8,
                DeActReplace     = 0x10
            };

            [version(0x00000001)]
            enum SelectionType
            {
                DeActNone           = 0,
                DeActInsertionPoint = 1,
                DeActNormal         = 2,
                DeActInlineShape    = 7,
                DeActShape          = 8
            };

            [version(0x00000001)]
            enum TabAlignment
            {
                DeActLeft    = 0,
                DeActCenter  = 1,
                DeActRight   = 2,
                DeActDecimal = 3,
                DeActBar     = 4
            };

            [version(0x00000001)]
            enum TabLeader
            {
                DeActSpaces     = 0,
                DeActDots       = 1,
                DeActDashes     = 2,
                DeActLines      = 3,
                DeActThickLines = 4,
                DeActEquals     = 5
            };

            [flags]
            [version(0x00000001)]
            enum TextGetOptions
            {
                DeActNone             = 0x0,
                DeActAdjustCrlf       = 0x1,
                DeActUseCrlf          = 0x2,
                DeActUseObjectText    = 0x4,
                DeActAllowFinalEop    = 0x8,
                DeActNoHidden         = 0x20,
                DeActIncludeNumbering = 0x40,
                DeActFormatRtf        = 0x2000,
                DeActUseLf            = 0x1000000
            };

            [version(0x00000001)]
            enum TextRangeUnit
            {
                DeActCharacter       = 0
            };

            [version(0x00000001)]
            enum TextScript
            {
                DeActUndefined     = 0
            };

            [flags]
            [version(0x00000001)]
            enum TextSetOptions
            {
                DeActNone                     = 0x0
            };

            [version(0x00000001)]
            enum UnderlineType
            {
                DeActUndefined       = 0
            };

            [version(0x00000001)]
            enum VerticalCharacterAlignment
            {
                DeActTop      = 0
            };

            [exclusiveto(Microsoft.UI.Text.FontWeights)]
            [uuid(386CD040-5404-5A8D-8BC7-2CA989F5C065)]
            [version(0x00000001)]
            interface IFontWeights : IInspectable
            {
            }

            [exclusiveto(Microsoft.UI.Text.FontWeights)]
            [uuid(CC390DF6-76B0-5807-8B9D-E949A4E623AE)]
            [version(0x00000001)]
            interface IFontWeightsStatics : IInspectable
            {
                [propget] HRESULT Black([out] [retval] Windows.UI.Text.FontWeight* value);
                [propget] HRESULT Bold([out] [retval] Windows.UI.Text.FontWeight* value);
                [propget] HRESULT ExtraBlack([out] [retval] Windows.UI.Text.FontWeight* value);
                [propget] HRESULT ExtraBold([out] [retval] Windows.UI.Text.FontWeight* value);
                [propget] HRESULT ExtraLight([out] [retval] Windows.UI.Text.FontWeight* value);
                [propget] HRESULT Light([out] [retval] Windows.UI.Text.FontWeight* value);
                [propget] HRESULT Medium([out] [retval] Windows.UI.Text.FontWeight* value);
                [propget] HRESULT Normal([out] [retval] Windows.UI.Text.FontWeight* value);
                [propget] HRESULT SemiBold([out] [retval] Windows.UI.Text.FontWeight* value);
                [propget] HRESULT SemiLight([out] [retval] Windows.UI.Text.FontWeight* value);
                [propget] HRESULT Thin([out] [retval] Windows.UI.Text.FontWeight* value);
            }

            [uuid(F5710050-98E5-5788-B1E3-32191EEBF94D)]
            [version(0x00000001)]
            interface ITextCharacterFormat : IInspectable
            {
                [propget] HRESULT AllCaps([out] [retval] Microsoft.UI.Text.FormatEffect* value);
                [propput] HRESULT AllCaps([in] Microsoft.UI.Text.FormatEffect value);
                [propget] HRESULT BackgroundColor([out] [retval] Windows.UI.Color* value);
                [propput] HRESULT BackgroundColor([in] Windows.UI.Color value);
                [propget] HRESULT Bold([out] [retval] Microsoft.UI.Text.FormatEffect* value);
                [propput] HRESULT Bold([in] Microsoft.UI.Text.FormatEffect value);
                [propget] HRESULT FontStretch([out] [retval] Windows.UI.Text.FontStretch* value);
                [propput] HRESULT FontStretch([in] Windows.UI.Text.FontStretch value);
                [propget] HRESULT FontStyle([out] [retval] Windows.UI.Text.FontStyle* value);
                [propput] HRESULT FontStyle([in] Windows.UI.Text.FontStyle value);
                [propget] HRESULT ForegroundColor([out] [retval] Windows.UI.Color* value);
                [propput] HRESULT ForegroundColor([in] Windows.UI.Color value);
                [propget] HRESULT Hidden([out] [retval] Microsoft.UI.Text.FormatEffect* value);
                [propput] HRESULT Hidden([in] Microsoft.UI.Text.FormatEffect value);
                [propget] HRESULT Italic([out] [retval] Microsoft.UI.Text.FormatEffect* value);
                [propput] HRESULT Italic([in] Microsoft.UI.Text.FormatEffect value);
                [propget] HRESULT Kerning([out] [retval] FLOAT* value);
                [propput] HRESULT Kerning([in] FLOAT value);
                [propget] HRESULT LanguageTag([out] [retval] HSTRING* value);
                [propput] HRESULT LanguageTag([in] HSTRING value);
                [propget] HRESULT LinkType([out] [retval] Microsoft.UI.Text.LinkType* value);
                [propget] HRESULT Name([out] [retval] HSTRING* value);
                [propput] HRESULT Name([in] HSTRING value);
                [propget] HRESULT Outline([out] [retval] Microsoft.UI.Text.FormatEffect* value);
                [propput] HRESULT Outline([in] Microsoft.UI.Text.FormatEffect value);
                [propget] HRESULT Position([out] [retval] FLOAT* value);
                [propput] HRESULT Position([in] FLOAT value);
                [propget] HRESULT ProtectedText([out] [retval] Microsoft.UI.Text.FormatEffect* value);
                [propput] HRESULT ProtectedText([in] Microsoft.UI.Text.FormatEffect value);
                [propget] HRESULT Size([out] [retval] FLOAT* value);
                [propput] HRESULT Size([in] FLOAT value);
                [propget] HRESULT SmallCaps([out] [retval] Microsoft.UI.Text.FormatEffect* value);
                [propput] HRESULT SmallCaps([in] Microsoft.UI.Text.FormatEffect value);
                [propget] HRESULT Spacing([out] [retval] FLOAT* value);
                [propput] HRESULT Spacing([in] FLOAT value);
                [propget] HRESULT Strikethrough([out] [retval] Microsoft.UI.Text.FormatEffect* value);
                [propput] HRESULT Strikethrough([in] Microsoft.UI.Text.FormatEffect value);
                [propget] HRESULT Subscript([out] [retval] Microsoft.UI.Text.FormatEffect* value);
                [propput] HRESULT Subscript([in] Microsoft.UI.Text.FormatEffect value);
                [propget] HRESULT Superscript([out] [retval] Microsoft.UI.Text.FormatEffect* value);
                [propput] HRESULT Superscript([in] Microsoft.UI.Text.FormatEffect value);
                [propget] HRESULT TextScript([out] [retval] Microsoft.UI.Text.TextScript* value);
                [propput] HRESULT TextScript([in] Microsoft.UI.Text.TextScript value);
                [propget] HRESULT Underline([out] [retval] Microsoft.UI.Text.UnderlineType* value);
                [propput] HRESULT Underline([in] Microsoft.UI.Text.UnderlineType value);
                [propget] HRESULT Weight([out] [retval] INT32* value);
                [propput] HRESULT Weight([in] INT32 value);
                HRESULT SetClone([in] Microsoft.UI.Text.ITextCharacterFormat* value);
                HRESULT GetClone([out] [retval] Microsoft.UI.Text.ITextCharacterFormat** result);
                HRESULT IsEqual([in] Microsoft.UI.Text.ITextCharacterFormat* format, [out] [retval] boolean* result);
            }

            [exclusiveto(Microsoft.UI.Text.TextConstants)]
            [uuid(CD353B3C-AF63-5CFB-918C-0F9C8931A161)]
            [version(0x00000001)]
            interface ITextConstantsStatics : IInspectable
            {
                [propget] HRESULT AutoColor([out] [retval] Windows.UI.Color* value);
                [propget] HRESULT MinUnitCount([out] [retval] INT32* value);
                [propget] HRESULT MaxUnitCount([out] [retval] INT32* value);
                [propget] HRESULT UndefinedColor([out] [retval] Windows.UI.Color* value);
                [propget] HRESULT UndefinedFloatValue([out] [retval] FLOAT* value);
                [propget] HRESULT UndefinedInt32Value([out] [retval] INT32* value);
                [propget] HRESULT UndefinedFontStretch([out] [retval] Windows.UI.Text.FontStretch* value);
                [propget] HRESULT UndefinedFontStyle([out] [retval] Windows.UI.Text.FontStyle* value);
            }

            [exclusiveto(Microsoft.UI.Text.RichEditTextDocument)]
            [uuid(1149D57D-86A6-59DD-88D9-196F27BC5C85)]
            [version(0x00000001)]
            interface ITextDocument : IInspectable
            {
                [propget] HRESULT CaretType([out] [retval] Microsoft.UI.Text.CaretType* value);
                [propput] HRESULT CaretType([in] Microsoft.UI.Text.CaretType value);
                [propget] HRESULT DefaultTabStop([out] [retval] FLOAT* value);
                [propput] HRESULT DefaultTabStop([in] FLOAT value);
                [propget] HRESULT Selection([out] [retval] Microsoft.UI.Text.ITextSelection** value);
                [propget] HRESULT UndoLimit([out] [retval] UINT32* value);
                [propput] HRESULT UndoLimit([in] UINT32 value);
                HRESULT CanCopy([out] [retval] boolean* result);
                HRESULT CanPaste([out] [retval] boolean* result);
                HRESULT CanRedo([out] [retval] boolean* result);
                HRESULT CanUndo([out] [retval] boolean* result);
                HRESULT ApplyDisplayUpdates([out] [retval] INT32* result);
                HRESULT BatchDisplayUpdates([out] [retval] INT32* result);
                HRESULT BeginUndoGroup();
                HRESULT EndUndoGroup();
                HRESULT GetDefaultCharacterFormat([out] [retval] Microsoft.UI.Text.ITextCharacterFormat** result);
                HRESULT GetDefaultParagraphFormat([out] [retval] Microsoft.UI.Text.ITextParagraphFormat** result);
                HRESULT GetRange([in] INT32 startPosition, [in] INT32 endPosition, [out] [retval] Microsoft.UI.Text.ITextRange** result);
                HRESULT GetRangeFromPoint([in] Windows.Foundation.Point point, [in] Microsoft.UI.Text.PointOptions options, [out] [retval] Microsoft.UI.Text.ITextRange** result);
                HRESULT GetText([in] Microsoft.UI.Text.TextGetOptions options, [out] HSTRING* value);
                HRESULT LoadFromStream([in] Microsoft.UI.Text.TextSetOptions options, [in] Windows.Storage.Streams.IRandomAccessStream* value);
                HRESULT Redo();
                HRESULT SaveToStream([in] Microsoft.UI.Text.TextGetOptions options, [in] Windows.Storage.Streams.IRandomAccessStream* value);
                HRESULT SetDefaultCharacterFormat([in] Microsoft.UI.Text.ITextCharacterFormat* value);
                HRESULT SetDefaultParagraphFormat([in] Microsoft.UI.Text.ITextParagraphFormat* value);
                HRESULT SetText([in] Microsoft.UI.Text.TextSetOptions options, [in] HSTRING value);
                HRESULT Undo();
                [propget] HRESULT AlignmentIncludesTrailingWhitespace([out] [retval] boolean* value);
                [propput] HRESULT AlignmentIncludesTrailingWhitespace([in] boolean value);
                [propget] HRESULT IgnoreTrailingCharacterSpacing([out] [retval] boolean* value);
                [propput] HRESULT IgnoreTrailingCharacterSpacing([in] boolean value);
                HRESULT ClearUndoRedoHistory();
            }

            [uuid(219B6CDF-0D0B-5701-B8A1-6C906B3EBBE1)]
            [version(0x00000001)]
            interface ITextParagraphFormat : IInspectable
            {
                [propget] HRESULT Alignment([out] [retval] Microsoft.UI.Text.ParagraphAlignment* value);
                [propput] HRESULT Alignment([in] Microsoft.UI.Text.ParagraphAlignment value);
                [propget] HRESULT FirstLineIndent([out] [retval] FLOAT* value);
                [propget] HRESULT KeepTogether([out] [retval] Microsoft.UI.Text.FormatEffect* value);
                [propput] HRESULT KeepTogether([in] Microsoft.UI.Text.FormatEffect value);
                [propget] HRESULT KeepWithNext([out] [retval] Microsoft.UI.Text.FormatEffect* value);
                [propput] HRESULT KeepWithNext([in] Microsoft.UI.Text.FormatEffect value);
                [propget] HRESULT LeftIndent([out] [retval] FLOAT* value);
                [propget] HRESULT LineSpacing([out] [retval] FLOAT* value);
                [propget] HRESULT LineSpacingRule([out] [retval] Microsoft.UI.Text.LineSpacingRule* value);
                [propget] HRESULT ListAlignment([out] [retval] Microsoft.UI.Text.MarkerAlignment* value);
                [propput] HRESULT ListAlignment([in] Microsoft.UI.Text.MarkerAlignment value);
                [propget] HRESULT ListLevelIndex([out] [retval] INT32* value);
                [propput] HRESULT ListLevelIndex([in] INT32 value);
                [propget] HRESULT ListStart([out] [retval] INT32* value);
                [propput] HRESULT ListStart([in] INT32 value);
                [propget] HRESULT ListStyle([out] [retval] Microsoft.UI.Text.MarkerStyle* value);
                [propput] HRESULT ListStyle([in] Microsoft.UI.Text.MarkerStyle value);
                [propget] HRESULT ListTab([out] [retval] FLOAT* value);
                [propput] HRESULT ListTab([in] FLOAT value);
                [propget] HRESULT ListType([out] [retval] Microsoft.UI.Text.MarkerType* value);
                [propput] HRESULT ListType([in] Microsoft.UI.Text.MarkerType value);
                [propget] HRESULT NoLineNumber([out] [retval] Microsoft.UI.Text.FormatEffect* value);
                [propput] HRESULT NoLineNumber([in] Microsoft.UI.Text.FormatEffect value);
                [propget] HRESULT PageBreakBefore([out] [retval] Microsoft.UI.Text.FormatEffect* value);
                [propput] HRESULT PageBreakBefore([in] Microsoft.UI.Text.FormatEffect value);
                [propget] HRESULT RightIndent([out] [retval] FLOAT* value);
                [propput] HRESULT RightIndent([in] FLOAT value);
                [propget] HRESULT RightToLeft([out] [retval] Microsoft.UI.Text.FormatEffect* value);
                [propput] HRESULT RightToLeft([in] Microsoft.UI.Text.FormatEffect value);
                [propget] HRESULT Style([out] [retval] Microsoft.UI.Text.ParagraphStyle* value);
                [propput] HRESULT Style([in] Microsoft.UI.Text.ParagraphStyle value);
                [propget] HRESULT SpaceAfter([out] [retval] FLOAT* value);
                [propput] HRESULT SpaceAfter([in] FLOAT value);
                [propget] HRESULT SpaceBefore([out] [retval] FLOAT* value);
                [propput] HRESULT SpaceBefore([in] FLOAT value);
                [propget] HRESULT WidowControl([out] [retval] Microsoft.UI.Text.FormatEffect* value);
                [propput] HRESULT WidowControl([in] Microsoft.UI.Text.FormatEffect value);
                [propget] HRESULT TabCount([out] [retval] INT32* value);
                HRESULT AddTab([in] FLOAT position, [in] Microsoft.UI.Text.TabAlignment align, [in] Microsoft.UI.Text.TabLeader leader);
                HRESULT ClearAllTabs();
                HRESULT DeleteTab([in] FLOAT position);
                HRESULT GetClone([out] [retval] Microsoft.UI.Text.ITextParagraphFormat** result);
                HRESULT GetTab([in] INT32 index, [out] FLOAT* position, [out] Microsoft.UI.Text.TabAlignment* align, [out] Microsoft.UI.Text.TabLeader* leader);
                HRESULT IsEqual([in] Microsoft.UI.Text.ITextParagraphFormat* format, [out] [retval] boolean* result);
                HRESULT SetClone([in] Microsoft.UI.Text.ITextParagraphFormat* format);
                HRESULT SetIndents([in] FLOAT start, [in] FLOAT left, [in] FLOAT right);
                HRESULT SetLineSpacing([in] Microsoft.UI.Text.LineSpacingRule rule, [in] FLOAT spacing);
            }

            [uuid(06D4ABCF-0C06-5D12-A743-85537EFD09EA)]
            [version(0x00000001)]
            interface ITextRange : IInspectable
            {
                [propget] HRESULT Character([out] [retval] WCHAR* value);
                [propput] HRESULT Character([in] WCHAR value);
                [propget] HRESULT CharacterFormat([out] [retval] Microsoft.UI.Text.ITextCharacterFormat** value);
                [propput] HRESULT CharacterFormat([in] Microsoft.UI.Text.ITextCharacterFormat* value);
                [propget] HRESULT FormattedText([out] [retval] Microsoft.UI.Text.ITextRange** value);
                [propput] HRESULT FormattedText([in] Microsoft.UI.Text.ITextRange* value);
                [propget] HRESULT EndPosition([out] [retval] INT32* value);
                [propput] HRESULT EndPosition([in] INT32 value);
                [propget] HRESULT Gravity([out] [retval] Microsoft.UI.Text.RangeGravity* value);
                [propput] HRESULT Gravity([in] Microsoft.UI.Text.RangeGravity value);
                [propget] HRESULT Length([out] [retval] INT32* value);
                [propget] HRESULT Link([out] [retval] HSTRING* value);
                [propput] HRESULT Link([in] HSTRING value);
                [propget] HRESULT ParagraphFormat([out] [retval] Microsoft.UI.Text.ITextParagraphFormat** value);
                [propput] HRESULT ParagraphFormat([in] Microsoft.UI.Text.ITextParagraphFormat* value);
                [propget] HRESULT StartPosition([out] [retval] INT32* value);
                [propput] HRESULT StartPosition([in] INT32 value);
                [propget] HRESULT StoryLength([out] [retval] INT32* value);
                [propget] HRESULT Text([out] [retval] HSTRING* value);
                [propput] HRESULT Text([in] HSTRING value);
                HRESULT CanPaste([in] INT32 format, [out] [retval] boolean* result);
                HRESULT ChangeCase([in] Microsoft.UI.Text.LetterCase value);
                HRESULT Collapse([in] boolean value);
                HRESULT Copy();
                HRESULT Cut();
                HRESULT Delete([in] Microsoft.UI.Text.TextRangeUnit unit, [in] INT32 count, [out] [retval] INT32* result);
                HRESULT EndOf([in] Microsoft.UI.Text.TextRangeUnit unit, [in] boolean extend, [out] [retval] INT32* result);
                HRESULT Expand([in] Microsoft.UI.Text.TextRangeUnit unit, [out] [retval] INT32* result);
                HRESULT FindText([in] HSTRING value, [in] INT32 scanLength, [in] Microsoft.UI.Text.FindOptions options, [out] [retval] INT32* result);
                HRESULT GetCharacterUtf32([out] UINT32* value, [in] INT32 offset);
                HRESULT GetClone([out] [retval] Microsoft.UI.Text.ITextRange** result);
                HRESULT GetIndex([in] Microsoft.UI.Text.TextRangeUnit unit, [out] [retval] INT32* result);
                HRESULT GetPoint([in] Microsoft.UI.Text.HorizontalCharacterAlignment horizontalAlign, [in] Microsoft.UI.Text.VerticalCharacterAlignment verticalAlign, [in] Microsoft.UI.Text.PointOptions options, [out] Windows.Foundation.Point* point);
                HRESULT GetRect([in] Microsoft.UI.Text.PointOptions options, [out] Windows.Foundation.Rect* rect, [out] INT32* hit);
                HRESULT GetText([in] Microsoft.UI.Text.TextGetOptions options, [out] HSTRING* value);
                HRESULT GetTextViaStream([in] Microsoft.UI.Text.TextGetOptions options, [in] Windows.Storage.Streams.IRandomAccessStream* value);
                HRESULT InRange([in] Microsoft.UI.Text.ITextRange* range, [out] [retval] boolean* result);
                HRESULT InsertImage([in] INT32 width, [in] INT32 height, [in] INT32 ascent, [in] Microsoft.UI.Text.VerticalCharacterAlignment verticalAlign, [in] HSTRING alternateText, [in] Windows.Storage.Streams.IRandomAccessStream* value);
                HRESULT InStory([in] Microsoft.UI.Text.ITextRange* range, [out] [retval] boolean* result);
                HRESULT IsEqual([in] Microsoft.UI.Text.ITextRange* range, [out] [retval] boolean* result);
                HRESULT Move([in] Microsoft.UI.Text.TextRangeUnit unit, [in] INT32 count, [out] [retval] INT32* result);
                HRESULT MoveEnd([in] Microsoft.UI.Text.TextRangeUnit unit, [in] INT32 count, [out] [retval] INT32* result);
                HRESULT MoveStart([in] Microsoft.UI.Text.TextRangeUnit unit, [in] INT32 count, [out] [retval] INT32* result);
                HRESULT Paste([in] INT32 format);
                HRESULT ScrollIntoView([in] Microsoft.UI.Text.PointOptions value);
                HRESULT MatchSelection();
                HRESULT SetIndex([in] Microsoft.UI.Text.TextRangeUnit unit, [in] INT32 index, [in] boolean extend);
                HRESULT SetPoint([in] Windows.Foundation.Point point, [in] Microsoft.UI.Text.PointOptions options, [in] boolean extend);
                HRESULT SetRange([in] INT32 startPosition, [in] INT32 endPosition);
                HRESULT SetText([in] Microsoft.UI.Text.TextSetOptions options, [in] HSTRING value);
                HRESULT SetTextViaStream([in] Microsoft.UI.Text.TextSetOptions options, [in] Windows.Storage.Streams.IRandomAccessStream* value);
                HRESULT StartOf([in] Microsoft.UI.Text.TextRangeUnit unit, [in] boolean extend, [out] [retval] INT32* result);
            }

            [uuid(8F5E6CB1-2B04-589F-BD24-54E5CD8DD399)]
            [version(0x00000001)]
            interface ITextSelection : IInspectable
                requires
                    Microsoft.UI.Text.ITextRange
            {
                [propget] HRESULT Options([out] [retval] Microsoft.UI.Text.SelectionOptions* value);
                [propput] HRESULT Options([in] Microsoft.UI.Text.SelectionOptions value);
                [propget] HRESULT Type([out] [retval] Microsoft.UI.Text.SelectionType* value);
                HRESULT EndKey([in] Microsoft.UI.Text.TextRangeUnit unit, [in] boolean extend, [out] [retval] INT32* result);
                HRESULT HomeKey([in] Microsoft.UI.Text.TextRangeUnit unit, [in] boolean extend, [out] [retval] INT32* result);
                HRESULT MoveDown([in] Microsoft.UI.Text.TextRangeUnit unit, [in] INT32 count, [in] boolean extend, [out] [retval] INT32* result);
                HRESULT MoveLeft([in] Microsoft.UI.Text.TextRangeUnit unit, [in] INT32 count, [in] boolean extend, [out] [retval] INT32* result);
                HRESULT MoveRight([in] Microsoft.UI.Text.TextRangeUnit unit, [in] INT32 count, [in] boolean extend, [out] [retval] INT32* result);
                HRESULT MoveUp([in] Microsoft.UI.Text.TextRangeUnit unit, [in] INT32 count, [in] boolean extend, [out] [retval] INT32* result);
                HRESULT TypeText([in] HSTRING value);
            }

            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Text.IFontWeightsStatics, 0x00000001)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass FontWeights
            {
                [default] interface Microsoft.UI.Text.IFontWeights;
            }

            [marshaling_behavior(agile)]
            [version(0x00010000)]
            runtimeclass RichEditTextDocument
            {
                [default] interface Microsoft.UI.Text.ITextDocument;
            }

            [marshaling_behavior(agile)]
            [version(0x00010000)]
            runtimeclass RichEditTextRange
            {
                [default] interface Microsoft.UI.Text.ITextRange;
            }

            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Text.ITextConstantsStatics, 0x00000001)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass TextConstants
            {
            }
        }
    }
}
