//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.System.idl";
import "Microsoft.UI.Composition.idl";
import "Windows.System.idl";
import "Windows.UI.Core.idl";

// Forward Declare
namespace Microsoft
{
    namespace System
    {
        runtimeclass DispatcherQueue;
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            runtimeclass Compositor;

            runtimeclass Visual;

            runtimeclass VisualTreeIsland;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        interface IClosable;

        typedef struct Point Point;

        apicontract UniversalApiContract;
    }
}
namespace Windows
{
    namespace System
    {
        typedef enum VirtualKey VirtualKey;
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Core
        {
            runtimeclass AcceleratorKeyEventArgs;

            runtimeclass CharacterReceivedEventArgs;

            runtimeclass CoreCursor;

            typedef enum CoreVirtualKeyStates CoreVirtualKeyStates;

            runtimeclass CoreWindow;

            runtimeclass KeyEventArgs;

            runtimeclass PointerEventArgs;

            runtimeclass TouchHitTestingEventArgs;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Input
        {
            apicontract ISMInternalContract;

            typedef enum FocusChangedDirection FocusChangedDirection;

            typedef enum HitTestConfiguration HitTestConfiguration;

            typedef enum InputActivationState InputActivationState;

            typedef enum InputType InputType;

            typedef enum WindowsMessageDeliveryType WindowsMessageDeliveryType;

            typedef struct InputSiteForIslandSiteConfiguration InputSiteForIslandSiteConfiguration;

            interface IAttachableInputObject;

            interface IAttachableInputObjectFactory;

            interface IContentBridge;

            interface IContextMenuKeyEventArgs;

            interface ICoreWindowLiftedContentBridge;

            interface ICoreWindowLiftedContentBridgeFactory;

            interface IDesktopWindowLiftedContentBridge;

            interface IDesktopWindowLiftedContentBridgeFactory;

            interface IFocusChangedEventArgs;

            interface IFocusController;

            interface IFocusControllerStatics;

            interface IFocusObserver;

            interface IFocusObserverFactory;

            interface IInputActivationListener;

            interface IInputActivationListenerActivationChangedEventArgs;

            interface IInputActivationListenerPartnerStatics;

            interface IInputObjectPartner;

            interface IInputObjectPartnerFactory;

            interface IInputSite;

            interface IInputSiteStatics;

            interface IKeyboardInput;

            interface IKeyboardInputStatics;

            interface IMouseCapture;

            interface IMouseCaptureStatics;

            interface IPointerCursorController;

            interface IPointerCursorControllerStatics;

            interface IPointerInputObserver;

            interface IPointerInputObserverFactory;

            interface ITouchHitTestingProvider;

            interface ITouchHitTestingProviderStatics;

            interface IWindowsMessageDelivery;

            interface IWindowsMessageDeliveryStatics;

            runtimeclass AttachableInputObject;

            runtimeclass ContextMenuKeyEventArgs;

            runtimeclass CoreWindowLiftedContentBridge;

            runtimeclass DesktopWindowLiftedContentBridge;

            runtimeclass FocusChangedEventArgs;

            runtimeclass FocusController;

            runtimeclass FocusObserver;

            runtimeclass InputActivationListener;

            runtimeclass InputActivationListenerActivationChangedEventArgs;

            runtimeclass InputActivationListenerPartner;

            runtimeclass InputObjectPartner;

            runtimeclass InputSite;

            runtimeclass KeyboardInput;

            runtimeclass MouseCapture;

            runtimeclass PointerCursorController;

            runtimeclass PointerInputObserver;

            runtimeclass TouchHitTestingProvider;

            runtimeclass WindowsMessageDelivery;
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace UI
    {
        namespace Input
        {
            declare
            {
                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.FocusObserver*, Microsoft.UI.Input.FocusChangedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.InputActivationListener*, Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.KeyboardInput*, Microsoft.UI.Input.ContextMenuKeyEventArgs*>;
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Input
        {
            [contractversion(1.0)]
            apicontract ISMInternalContract
            {
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            enum FocusChangedDirection
            {
                None     = 0,
                Next     = 1,
                Previous = 2,
                Up       = 3,
                Down     = 4,
                Left     = 5,
                Right    = 6
            };

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            enum HitTestConfiguration
            {
                Self       = 0,
                ChildAreas = 1,
                Both       = 2
            };

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [experimental]
            enum InputActivationState
            {
                None                   = 0,
                Deactivated            = 1,
                ActivatedNotForeground = 2,
                ActivatedInForeground  = 3
            };

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            enum InputType
            {
                Unknown = 0,
                Mouse   = 1,
                Touch   = 2,
                Pen     = 3
            };

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            enum WindowsMessageDeliveryType
            {
                CoreWindow           = 0,
                CoreComponentInput   = 1,
                CoreIndependentInput = 2,
                IslandSite           = 3,
                Island               = 4
            };

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            struct InputSiteForIslandSiteConfiguration
            {
                UINT64 WindowId;
                UINT32 ViewInstanceId;
                boolean SupportsActivation;
            };

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [exclusiveto(Microsoft.UI.Input.AttachableInputObject)]
            [experimental]
            [uuid(69741938-9DE5-57B6-98E7-8895BF9EB420)]
            interface IAttachableInputObject : IInspectable
            {
            }

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [exclusiveto(Microsoft.UI.Input.AttachableInputObject)]
            [experimental]
            [uuid(3E6F6172-AA2B-51B9-99D0-B710B5E34B99)]
            interface IAttachableInputObjectFactory : IInspectable
            {
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            [uuid(B9E84CD6-BFD0-51E0-A272-C349E102BA3A)]
            interface IContentBridge : IInspectable
                requires
                    Windows.Foundation.IClosable
            {
                HRESULT Connect([in] Microsoft.UI.Composition.VisualTreeIsland* island, [in] Microsoft.UI.Input.InputSite* inputSite);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.ContextMenuKeyEventArgs)]
            [experimental]
            [uuid(F6025762-9426-541A-B647-037ABDBECEFC)]
            interface IContextMenuKeyEventArgs : IInspectable
            {
                [propget] HRESULT Handled([out] [retval] boolean* value);
                [propput] HRESULT Handled([in] boolean value);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.CoreWindowLiftedContentBridge)]
            [experimental]
            [uuid(9505F821-BA14-5427-AB7D-D0BBCB2278A6)]
            interface ICoreWindowLiftedContentBridge : IInspectable
            {
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.CoreWindowLiftedContentBridge)]
            [experimental]
            [uuid(1D0934B8-C69B-5F16-983F-AC3C2D4AEE75)]
            interface ICoreWindowLiftedContentBridgeFactory : IInspectable
            {
                HRESULT CreateInstance([in] Microsoft.UI.Composition.Compositor* compositor, [in] Windows.UI.Core.CoreWindow* coreWindow, [out] [retval] Microsoft.UI.Input.CoreWindowLiftedContentBridge** value);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.DesktopWindowLiftedContentBridge)]
            [experimental]
            [uuid(181527F2-756D-5B61-9420-0E6485581111)]
            interface IDesktopWindowLiftedContentBridge : IInspectable
            {
                [propget] HRESULT AppliedScaleFactor([out] [retval] FLOAT* value);
                [propget] HRESULT CompositionIsland([out] [retval] Microsoft.UI.Composition.VisualTreeIsland** value);
                [propget] HRESULT HwndAsWindowId([out] [retval] UINT64* value);
                [propget] HRESULT InputSite([out] [retval] Microsoft.UI.Input.InputSite** value);
                [propget] HRESULT ScaleFactor([out] [retval] FLOAT* value);
                [propput] HRESULT ScaleFactor([in] FLOAT value);
                HRESULT Activate([in] boolean active);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.DesktopWindowLiftedContentBridge)]
            [experimental]
            [uuid(FCDDA493-1AB9-5E0C-945E-E55D218A6588)]
            interface IDesktopWindowLiftedContentBridgeFactory : IInspectable
            {
                HRESULT CreateInstance([in] Microsoft.UI.Composition.Compositor* compositor, [in] UINT64 parentHwndAsWindowId, [out] [retval] Microsoft.UI.Input.DesktopWindowLiftedContentBridge** value);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.FocusChangedEventArgs)]
            [experimental]
            [uuid(69F37917-DB62-535C-9BD5-4A8298AC1B39)]
            interface IFocusChangedEventArgs : IInspectable
            {
                [propget] HRESULT Direction([out] [retval] Microsoft.UI.Input.FocusChangedDirection* value);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.FocusController)]
            [experimental]
            [uuid(443CDE2A-33D2-5FA9-8CB4-2BEA8978399A)]
            interface IFocusController : IInspectable
            {
                HRESULT TrySetFocus([out] [retval] boolean* result);
                [propget] HRESULT HasFocus([out] [retval] boolean* value);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.FocusController)]
            [experimental]
            [uuid(D40BF5B9-62C7-5BAD-8859-6DCD62CDCEDB)]
            interface IFocusControllerStatics : IInspectable
            {
                HRESULT GetForInputSite([in] Microsoft.UI.Input.InputSite* inputSite, [out] [retval] Microsoft.UI.Input.FocusController** result);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.FocusObserver)]
            [experimental]
            [uuid(93EC6858-E99B-5E80-A6CA-FD705FDC4E31)]
            interface IFocusObserver : IInspectable
            {
                [propget] HRESULT HasFocus([out] [retval] boolean* value);
                [eventadd] HRESULT GotFocus([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.FocusObserver*, Microsoft.UI.Input.FocusChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT GotFocus([in] EventRegistrationToken token);
                [eventadd] HRESULT LostFocus([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.FocusObserver*, Microsoft.UI.Input.FocusChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT LostFocus([in] EventRegistrationToken token);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.FocusObserver)]
            [experimental]
            [uuid(922AFDFE-99A1-5C98-8840-801E28C3D750)]
            interface IFocusObserverFactory : IInspectable
            {
                HRESULT CreateInstance([in] Microsoft.UI.Input.InputSite* inputSite, [out] [retval] Microsoft.UI.Input.FocusObserver** value);
            }

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [exclusiveto(Microsoft.UI.Input.InputActivationListener)]
            [experimental]
            [uuid(3B818627-6CE7-5E0D-A0F5-6684FD1AEC78)]
            interface IInputActivationListener : IInspectable
            {
                [propget] HRESULT State([out] [retval] Microsoft.UI.Input.InputActivationState* value);
                [eventadd] HRESULT InputActivationChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.InputActivationListener*, Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT InputActivationChanged([in] EventRegistrationToken token);
            }

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [exclusiveto(Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs)]
            [experimental]
            [uuid(381FCCE4-4C82-5CDF-B3AA-57A4276C1BEB)]
            interface IInputActivationListenerActivationChangedEventArgs : IInspectable
            {
                [propget] HRESULT State([out] [retval] Microsoft.UI.Input.InputActivationState* value);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.InputActivationListenerPartner)]
            [experimental]
            [uuid(C96DEF7F-201F-518B-9DAB-9F0F5DCF8730)]
            interface IInputActivationListenerPartnerStatics : IInspectable
            {
                HRESULT GetForInputSite([in] Microsoft.UI.Input.InputSite* inputSite, [out] [retval] IInspectable** result);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.InputObjectPartner)]
            [experimental]
            [uuid(E8B4EEF6-932B-5DF4-B1AB-51D41EA33FE7)]
            interface IInputObjectPartner : IInspectable
            {
                [propget] HRESULT InputSite([out] [retval] Microsoft.UI.Input.InputSite** value);
                [propget] HRESULT DispatcherQueue([out] [retval] Microsoft.System.DispatcherQueue** value);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.InputObjectPartner)]
            [experimental]
            [uuid(5C0D1330-E1B1-5449-AC76-1113D7791833)]
            interface IInputObjectPartnerFactory : IInspectable
            {
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.InputSite)]
            [experimental]
            [uuid(1C75759C-DE25-5BEB-B4CF-8C82909F3833)]
            interface IInputSite : IInspectable
            {
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.InputSite)]
            [experimental]
            [uuid(154D4A56-4AA0-5EE5-823C-02A8DD38EF05)]
            interface IInputSiteStatics : IInspectable
            {
                HRESULT GetForVisual([in] Microsoft.UI.Composition.Visual* visual, [out] [retval] Microsoft.UI.Input.InputSite** result);
                HRESULT GetForHwnd([in] UINT64 hwndAsUInt64, [out] [retval] Microsoft.UI.Input.InputSite** result);
                HRESULT CreateForIslandSite([in] IInspectable* visualIslandSite, [in] Microsoft.UI.Input.InputSiteForIslandSiteConfiguration configuration, [out] [retval] Microsoft.UI.Input.InputSite** result);
                HRESULT GetOrCreateForIsland([in] IInspectable* visualTreeIsland, [out] [retval] Microsoft.UI.Input.InputSite** result);
                HRESULT ConnectIsland([in] Microsoft.UI.Input.InputSite* islandSiteInputSite, [in] Microsoft.UI.Input.InputSite* islandInputSite);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.KeyboardInput)]
            [experimental]
            [uuid(A174DE40-8A3D-529D-9EDF-07EF7F5483C4)]
            interface IKeyboardInput : IInspectable
            {
                HRESULT GetKeyState([in] Windows.System.VirtualKey virtualKey, [out] [retval] Windows.UI.Core.CoreVirtualKeyStates* result);
                HRESULT GetCurrentKeyState([in] Windows.System.VirtualKey virtualKey, [out] [retval] Windows.UI.Core.CoreVirtualKeyStates* result);
                [propget] HRESULT CurrentKeyEventDeviceId([out] [retval] HSTRING* value);
                [eventadd] HRESULT AcceleratorKeyActivated([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.KeyboardInput*, Windows.UI.Core.AcceleratorKeyEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT AcceleratorKeyActivated([in] EventRegistrationToken token);
                [eventadd] HRESULT CharacterReceived([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.KeyboardInput*, Windows.UI.Core.CharacterReceivedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT CharacterReceived([in] EventRegistrationToken token);
                [eventadd] HRESULT KeyDown([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.KeyboardInput*, Windows.UI.Core.KeyEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT KeyDown([in] EventRegistrationToken token);
                [eventadd] HRESULT KeyUp([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.KeyboardInput*, Windows.UI.Core.KeyEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT KeyUp([in] EventRegistrationToken token);
                [eventadd] HRESULT SysKeyDown([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.KeyboardInput*, Windows.UI.Core.KeyEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT SysKeyDown([in] EventRegistrationToken token);
                [eventadd] HRESULT SysKeyUp([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.KeyboardInput*, Windows.UI.Core.KeyEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT SysKeyUp([in] EventRegistrationToken token);
                [eventadd] HRESULT ContextMenuKey([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.KeyboardInput*, Microsoft.UI.Input.ContextMenuKeyEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ContextMenuKey([in] EventRegistrationToken token);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.KeyboardInput)]
            [experimental]
            [uuid(3E2D115C-410F-5476-89F6-35693287CE01)]
            interface IKeyboardInputStatics : IInspectable
            {
                HRESULT GetForInputSite([in] Microsoft.UI.Input.InputSite* inputSite, [out] [retval] Microsoft.UI.Input.KeyboardInput** result);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.MouseCapture)]
            [experimental]
            [uuid(3ED55268-E63E-5756-999D-0ACB7B39331D)]
            interface IMouseCapture : IInspectable
            {
                HRESULT TrySetCapture([out] [retval] boolean* result);
                HRESULT TryReleaseCapture([out] [retval] boolean* result);
                [propget] HRESULT HasCapture([out] [retval] boolean* value);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.MouseCapture)]
            [experimental]
            [uuid(B3EEB519-9B27-586E-B3DB-B8B948FE680B)]
            interface IMouseCaptureStatics : IInspectable
            {
                HRESULT GetForInputSite([in] Microsoft.UI.Input.InputSite* inputSite, [out] [retval] Microsoft.UI.Input.MouseCapture** result);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.PointerCursorController)]
            [experimental]
            [uuid(959ABC0B-D3CA-56E9-ACED-DE1DF6029C2A)]
            interface IPointerCursorController : IInspectable
            {
                [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                [propget] HRESULT Cursor([out] [retval] Windows.UI.Core.CoreCursor** value);
                [propput] HRESULT Cursor([in] Windows.UI.Core.CoreCursor* value);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.PointerCursorController)]
            [experimental]
            [uuid(45CA99A8-7B4B-585C-80C6-4B7C261E4DAD)]
            interface IPointerCursorControllerStatics : IInspectable
            {
                HRESULT GetForInputSite([in] Microsoft.UI.Input.InputSite* inputSite, [out] [retval] Microsoft.UI.Input.PointerCursorController** result);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.PointerInputObserver)]
            [experimental]
            [uuid(09A750C3-F303-573D-B6E0-0FDFD705DD86)]
            interface IPointerInputObserver : IInspectable
            {
                [eventadd] HRESULT PointerCaptureLost([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.PointerInputObserver*, Windows.UI.Core.PointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerCaptureLost([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerEntered([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.PointerInputObserver*, Windows.UI.Core.PointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerEntered([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerExited([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.PointerInputObserver*, Windows.UI.Core.PointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerExited([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerMoved([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.PointerInputObserver*, Windows.UI.Core.PointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerMoved([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerPressed([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.PointerInputObserver*, Windows.UI.Core.PointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerPressed([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerReleased([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.PointerInputObserver*, Windows.UI.Core.PointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerReleased([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerRoutedAway([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.PointerInputObserver*, Windows.UI.Core.PointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerRoutedAway([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerRoutedReleased([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.PointerInputObserver*, Windows.UI.Core.PointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerRoutedReleased([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerRoutedTo([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.PointerInputObserver*, Windows.UI.Core.PointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerRoutedTo([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerWheelChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.PointerInputObserver*, Windows.UI.Core.PointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerWheelChanged([in] EventRegistrationToken token);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.PointerInputObserver)]
            [experimental]
            [uuid(C2FD90C9-DD14-554D-85E5-FA265FB73445)]
            interface IPointerInputObserverFactory : IInspectable
            {
                HRESULT CreateInstance([in] Microsoft.UI.Input.InputSite* site, [out] [retval] Microsoft.UI.Input.PointerInputObserver** value);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.TouchHitTestingProvider)]
            [experimental]
            [uuid(444B83DA-7A58-5BFD-A157-9F27ECB2BE60)]
            interface ITouchHitTestingProvider : IInspectable
            {
                [eventadd] HRESULT TouchHitTestRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.TouchHitTestingProvider*, Windows.UI.Core.TouchHitTestingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT TouchHitTestRequested([in] EventRegistrationToken token);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.TouchHitTestingProvider)]
            [experimental]
            [uuid(4D586F2A-8CD2-5D01-80E9-0D7D8BCEEB62)]
            interface ITouchHitTestingProviderStatics : IInspectable
            {
                HRESULT GetForInputSite([in] Microsoft.UI.Input.InputSite* inputSite, [out] [retval] Microsoft.UI.Input.TouchHitTestingProvider** result);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.WindowsMessageDelivery)]
            [experimental]
            [uuid(9DF77403-7D9E-50E8-AAFD-FA1164528E90)]
            interface IWindowsMessageDelivery : IInspectable
            {
                [propget] HRESULT WindowId([out] [retval] UINT64* value);
                [propget] HRESULT Type([out] [retval] Microsoft.UI.Input.WindowsMessageDeliveryType* value);
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [exclusiveto(Microsoft.UI.Input.WindowsMessageDelivery)]
            [experimental]
            [uuid(03C77EDD-7940-5686-B356-6F64077D9261)]
            interface IWindowsMessageDeliveryStatics : IInspectable
            {
                HRESULT CreateForInputSite([in] Microsoft.UI.Input.InputSite* inputSite, [in] UINT64 windowId, [in] Microsoft.UI.Input.WindowsMessageDeliveryType type, [out] [retval] Microsoft.UI.Input.WindowsMessageDelivery** result);
                HRESULT TryGetForInputSite([in] Microsoft.UI.Input.InputSite* inputSite, [out] [retval] Microsoft.UI.Input.WindowsMessageDelivery** result);
            }

            [composable(Microsoft.UI.Input.IAttachableInputObjectFactory, public, Windows.Foundation.UniversalApiContract, 8.0)]
            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [experimental]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass AttachableInputObject
            {
                [default] [experimental] interface Microsoft.UI.Input.IAttachableInputObject;
                interface Windows.Foundation.IClosable;
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            runtimeclass ContextMenuKeyEventArgs
            {
                [default] [experimental] interface Microsoft.UI.Input.IContextMenuKeyEventArgs;
            }

            [activatable(Microsoft.UI.Input.ICoreWindowLiftedContentBridgeFactory, Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass CoreWindowLiftedContentBridge
            {
                [default] [experimental] interface Microsoft.UI.Input.ICoreWindowLiftedContentBridge;
                [experimental] interface Microsoft.UI.Input.IContentBridge;
                interface Windows.Foundation.IClosable;
            }

            [activatable(Microsoft.UI.Input.IDesktopWindowLiftedContentBridgeFactory, Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass DesktopWindowLiftedContentBridge
            {
                [default] [experimental] interface Microsoft.UI.Input.IDesktopWindowLiftedContentBridge;
                [experimental] interface Microsoft.UI.Input.IContentBridge;
                interface Windows.Foundation.IClosable;
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            runtimeclass FocusChangedEventArgs
            {
                [default] [experimental] interface Microsoft.UI.Input.IFocusChangedEventArgs;
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Input.IFocusControllerStatics, Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [threading(both)]
            runtimeclass FocusController : Microsoft.UI.Input.InputObjectPartner
            {
                [default] [experimental] interface Microsoft.UI.Input.IFocusController;
            }

            [activatable(Microsoft.UI.Input.IFocusObserverFactory, Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass FocusObserver : Microsoft.UI.Input.InputObjectPartner
            {
                [default] [experimental] interface Microsoft.UI.Input.IFocusObserver;
            }

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [experimental]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass InputActivationListener : Microsoft.UI.Input.AttachableInputObject
            {
                [default] [experimental] interface Microsoft.UI.Input.IInputActivationListener;
            }

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [experimental]
            [marshaling_behavior(agile)]
            runtimeclass InputActivationListenerActivationChangedEventArgs
            {
                [default] [experimental] interface Microsoft.UI.Input.IInputActivationListenerActivationChangedEventArgs;
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Input.IInputActivationListenerPartnerStatics, Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [threading(both)]
            runtimeclass InputActivationListenerPartner
            {
            }

            [composable(Microsoft.UI.Input.IInputObjectPartnerFactory, public, Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass InputObjectPartner
            {
                [default] [experimental] interface Microsoft.UI.Input.IInputObjectPartner;
                interface Windows.Foundation.IClosable;
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Input.IInputSiteStatics, Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [threading(both)]
            runtimeclass InputSite
            {
                [default] [experimental] interface Microsoft.UI.Input.IInputSite;
                interface Windows.Foundation.IClosable;
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Input.IKeyboardInputStatics, Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [threading(both)]
            runtimeclass KeyboardInput : Microsoft.UI.Input.InputObjectPartner
            {
                [default] [experimental] interface Microsoft.UI.Input.IKeyboardInput;
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Input.IMouseCaptureStatics, Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [threading(both)]
            runtimeclass MouseCapture : Microsoft.UI.Input.InputObjectPartner
            {
                [default] [experimental] interface Microsoft.UI.Input.IMouseCapture;
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Input.IPointerCursorControllerStatics, Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [threading(both)]
            runtimeclass PointerCursorController : Microsoft.UI.Input.InputObjectPartner
            {
                [default] [experimental] interface Microsoft.UI.Input.IPointerCursorController;
            }

            [activatable(Microsoft.UI.Input.IPointerInputObserverFactory, Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass PointerInputObserver : Microsoft.UI.Input.InputObjectPartner
            {
                [default] [experimental] interface Microsoft.UI.Input.IPointerInputObserver;
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Input.ITouchHitTestingProviderStatics, Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [threading(both)]
            runtimeclass TouchHitTestingProvider : Microsoft.UI.Input.InputObjectPartner
            {
                [default] [experimental] interface Microsoft.UI.Input.ITouchHitTestingProvider;
            }

            [contract(Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [experimental]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Input.IWindowsMessageDeliveryStatics, Microsoft.UI.Input.ISMInternalContract, 1.0)]
            [threading(both)]
            runtimeclass WindowsMessageDelivery : Microsoft.UI.Input.InputObjectPartner
            {
                [default] [experimental] interface Microsoft.UI.Input.IWindowsMessageDelivery;
            }
        }
    }
}
