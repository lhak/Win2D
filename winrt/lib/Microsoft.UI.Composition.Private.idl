//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.UI.Composition.idl";
import "Windows.Foundation.Numerics.idl";
import "Windows.Graphics.DirectX.idl";

// Forward Declare
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            runtimeclass AnimationPropertyInfo;

            runtimeclass CompositionGraphicsDevice;

            runtimeclass CompositionObject;

            interface ICompositionSurface;

            runtimeclass Visual;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        namespace Numerics
        {
            typedef struct Matrix4x4 Matrix4x4;

            typedef struct Quaternion Quaternion;

            typedef struct Vector2 Vector2;

            typedef struct Vector3 Vector3;
        }
    }
}
namespace Windows
{
    namespace Graphics
    {
        namespace DirectX
        {
            typedef enum DirectXAlphaMode DirectXAlphaMode;

            typedef enum DirectXPixelFormat DirectXPixelFormat;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            namespace Private
            {
                apicontract LiftedPrivateContract;

                typedef enum AnimationPropertyKind AnimationPropertyKind;

                typedef enum CompositionCubeMapFace CompositionCubeMapFace;

                typedef enum CompositionDepthMode CompositionDepthMode;

                typedef enum CompositionResampleMode CompositionResampleMode;

                interface IAnimationPropertyInfoPartner;

                interface ICompositionCubeMap;

                interface ICompositionSkyBoxBrush;

                interface ICompositionSurfaceFacadePartner;

                interface ICompositorPrivate;

                interface IDataSourceReader;

                interface IRectangleClip;

                interface IScaleVisual;

                interface ITransformInformation;

                interface ITransformInformationFactory;

                interface IVisualElementPartner;

                interface IVisualPrivate;

                interface IVisualTreeIslandDesktopPartner;

                interface IVisualTreeIslandPartner;

                runtimeclass CompositionCubeMap;

                runtimeclass CompositionSkyBoxBrush;

                runtimeclass DataSourceReader;

                runtimeclass RectangleClip;

                runtimeclass ScaleVisual;

                runtimeclass TransformInformation;

                runtimeclass TransformInformationFactory;
            }
        }
    }
}

// Generic instantiations

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            namespace Private
            {
                [contractversion(1.0)]
                apicontract LiftedPrivateContract
                {
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                enum AnimationPropertyKind
                {
                    Unspecified = 0,
                    Single      = 1,
                    Boolean     = 2,
                    Vector2     = 3,
                    Vector3     = 4,
                    Vector4     = 5,
                    Quaternion  = 6,
                    Color       = 7,
                    Matrix3x2   = 8,
                    Matrix4x4   = 9
                };

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                enum CompositionCubeMapFace
                {
                    XPositive = 0,
                    XNegative = 1,
                    YPositive = 2,
                    YNegative = 3,
                    ZPositive = 4,
                    ZNegative = 5
                };

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                enum CompositionDepthMode
                {
                    Tree    = 0,
                    Spatial = 1,
                    Inherit = 2,
                    Sorted  = 3
                };

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                enum CompositionResampleMode
                {
                    Default = 0,
                    Lanczos = 1,
                    XBR     = 2
                };

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                [uuid(19B15BF2-5E56-58C8-B47D-067E2B39EA5A)]
                interface IAnimationPropertyInfoPartner : IInspectable
                {
                    [propget] HRESULT ResolvedCompositionObject([out] [retval] Microsoft.UI.Composition.CompositionObject** value);
                    [propget] HRESULT ResolvedCompositionObjectProperty([out] [retval] HSTRING* value);
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Private.CompositionCubeMap)]
                [experimental]
                [uuid(9DC81110-459E-52C6-AD09-DA74C8A7F520)]
                interface ICompositionCubeMap : IInspectable
                {
                    [propget] HRESULT MipLevels([out] [retval] UINT32* value);
                    [propget] HRESULT Size([out] [retval] UINT32* value);
                    [propget] HRESULT AutomaticMipmaps([out] [retval] boolean* value);
                    HRESULT SetSurfaces([in] UINT32 mipLevel, [in] Microsoft.UI.Composition.ICompositionSurface* xPositive, [in] Microsoft.UI.Composition.ICompositionSurface* xNegative, [in] Microsoft.UI.Composition.ICompositionSurface* yPositive, [in] Microsoft.UI.Composition.ICompositionSurface* yNegative, [in] Microsoft.UI.Composition.ICompositionSurface* zPositive, [in] Microsoft.UI.Composition.ICompositionSurface* zNegative);
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Private.CompositionSkyBoxBrush)]
                [experimental]
                [uuid(D1C29D15-84B0-573A-81C8-0AE1EC565502)]
                interface ICompositionSkyBoxBrush : IInspectable
                {
                    [propget] HRESULT AnchorPoint([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                    [propput] HRESULT AnchorPoint([in] Windows.Foundation.Numerics.Vector2 value);
                    [propget] HRESULT CenterPoint([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                    [propput] HRESULT CenterPoint([in] Windows.Foundation.Numerics.Vector3 value);
                    [propget] HRESULT IsLocal([out] [retval] boolean* value);
                    [propput] HRESULT IsLocal([in] boolean value);
                    [propget] HRESULT Offset([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                    [propput] HRESULT Offset([in] Windows.Foundation.Numerics.Vector3 value);
                    [propget] HRESULT Orientation([out] [retval] Windows.Foundation.Numerics.Quaternion* value);
                    [propput] HRESULT Orientation([in] Windows.Foundation.Numerics.Quaternion value);
                    [propget] HRESULT Size([out] [retval] FLOAT* value);
                    [propput] HRESULT Size([in] FLOAT value);
                    [propget] HRESULT Source([out] [retval] Microsoft.UI.Composition.Private.CompositionCubeMap** value);
                    [propput] HRESULT Source([in] Microsoft.UI.Composition.Private.CompositionCubeMap* value);
                    [propget] HRESULT RotationAngle([out] [retval] FLOAT* value);
                    [propput] HRESULT RotationAngle([in] FLOAT value);
                    [propget] HRESULT RotationAngleInDegrees([out] [retval] FLOAT* value);
                    [propput] HRESULT RotationAngleInDegrees([in] FLOAT value);
                    [propget] HRESULT RotationAxis([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                    [propput] HRESULT RotationAxis([in] Windows.Foundation.Numerics.Vector3 value);
                    [propget] HRESULT Scale([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                    [propput] HRESULT Scale([in] Windows.Foundation.Numerics.Vector3 value);
                    [propget] HRESULT TransformMatrix([out] [retval] Windows.Foundation.Numerics.Matrix4x4* value);
                    [propput] HRESULT TransformMatrix([in] Windows.Foundation.Numerics.Matrix4x4 value);
                    HRESULT GetFaceVisibility([in] Microsoft.UI.Composition.Private.CompositionCubeMapFace face, [out] [retval] boolean* result);
                    HRESULT SetFaceVisibility([in] Microsoft.UI.Composition.Private.CompositionCubeMapFace face, [in] boolean value);
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                [uuid(9FCD509F-3FF4-59DD-8AB3-C6ECD4A30C3F)]
                interface ICompositionSurfaceFacadePartner : IInspectable
                {
                    HRESULT GetRealSurface([out] [retval] Microsoft.UI.Composition.ICompositionSurface** result);
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                [uuid(9EF69BDA-43E0-5403-9256-4836928484A3)]
                interface ICompositorPrivate : IInspectable
                {
                    [propget] HRESULT CurrentBatchId([out] [retval] UINT32* value);
                    [propget] HRESULT LastConfirmedBatchId([out] [retval] UINT32* value);
                    HRESULT CreateAnimationPropertyInfo([out] [retval] Microsoft.UI.Composition.AnimationPropertyInfo** result);
                    HRESULT CreateCubeMap([in] UINT32 size, [in] UINT32 mipLevels, [in] boolean automaticMipmaps, [out] [retval] Microsoft.UI.Composition.Private.CompositionCubeMap** result);
                    HRESULT CreateDataSourceReader([in] UINT64 providerId, [in] UINT64 dataSourceId, [out] [retval] Microsoft.UI.Composition.Private.DataSourceReader** result);
                    [overload("CreateRectangleClip")] HRESULT CreateRectangleClip([out] [retval] Microsoft.UI.Composition.Private.RectangleClip** result);
                    [overload("CreateRectangleClip")] HRESULT CreateRectangleClipWithSides([in] FLOAT left, [in] FLOAT top, [in] FLOAT right, [in] FLOAT bottom, [out] [retval] Microsoft.UI.Composition.Private.RectangleClip** result);
                    [overload("CreateRectangleClip")] HRESULT CreateRectangleClipWithSidesAndRadius([in] FLOAT left, [in] FLOAT top, [in] FLOAT right, [in] FLOAT bottom, [in] Windows.Foundation.Numerics.Vector2 topLeftRadius, [in] Windows.Foundation.Numerics.Vector2 topRightRadius, [in] Windows.Foundation.Numerics.Vector2 bottomLeftRadius, [in] Windows.Foundation.Numerics.Vector2 bottomRightRadius, [out] [retval] Microsoft.UI.Composition.Private.RectangleClip** result);
                    HRESULT CreateScaleVisual([out] [retval] Microsoft.UI.Composition.Private.ScaleVisual** result);
                    HRESULT CreateSkyBoxBrush([out] [retval] Microsoft.UI.Composition.Private.CompositionSkyBoxBrush** result);
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Private.DataSourceReader)]
                [experimental]
                [uuid(1D74BDA7-2D1E-5E62-8BC6-A36C401F99B7)]
                interface IDataSourceReader : IInspectable
                {
                    HRESULT AddDataSourcePropertyId([in] HSTRING propertyName, [in] UINT32 dataSourcePropertyId, [in] Microsoft.UI.Composition.Private.AnimationPropertyKind propertyKind);
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Private.RectangleClip)]
                [experimental]
                [uuid(BE289788-E97E-5382-9C14-6247736A37EA)]
                interface IRectangleClip : IInspectable
                {
                    [propget] HRESULT Bottom([out] [retval] FLOAT* value);
                    [propput] HRESULT Bottom([in] FLOAT value);
                    [propget] HRESULT BottomLeftRadius([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                    [propput] HRESULT BottomLeftRadius([in] Windows.Foundation.Numerics.Vector2 value);
                    [propget] HRESULT BottomRightRadius([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                    [propput] HRESULT BottomRightRadius([in] Windows.Foundation.Numerics.Vector2 value);
                    [propget] HRESULT Left([out] [retval] FLOAT* value);
                    [propput] HRESULT Left([in] FLOAT value);
                    [propget] HRESULT Right([out] [retval] FLOAT* value);
                    [propput] HRESULT Right([in] FLOAT value);
                    [propget] HRESULT Top([out] [retval] FLOAT* value);
                    [propput] HRESULT Top([in] FLOAT value);
                    [propget] HRESULT TopLeftRadius([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                    [propput] HRESULT TopLeftRadius([in] Windows.Foundation.Numerics.Vector2 value);
                    [propget] HRESULT TopRightRadius([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                    [propput] HRESULT TopRightRadius([in] Windows.Foundation.Numerics.Vector2 value);
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Private.ScaleVisual)]
                [experimental]
                [uuid(3FB39999-337F-5CDD-91BE-D8CE6C40CD76)]
                interface IScaleVisual : IInspectable
                {
                    [propget] HRESULT ResampleMode([out] [retval] Microsoft.UI.Composition.Private.CompositionResampleMode* value);
                    [propput] HRESULT ResampleMode([in] Microsoft.UI.Composition.Private.CompositionResampleMode value);
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Private.TransformInformation)]
                [experimental]
                [uuid(FFC82FEE-48DE-5D9A-AA7E-AC717ED7E6B0)]
                interface ITransformInformation : IInspectable
                {
                    [propget] HRESULT DisplaySizePhysicalPixels([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                    [propget] HRESULT ScreenPhysicalPixelsToHimetricScaleFactor([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                    [propget] HRESULT VisualRelativePixelsToScreenPhysicalPixelsScale([out] [retval] FLOAT* value);
                    [propget] HRESULT VisualRelativePixelsToScreenPhysicalPixelsRotation([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                [uuid(48EA0687-9BAC-5DA1-BEA9-22EA7D943494)]
                interface ITransformInformationFactory : IInspectable
                {
                    HRESULT ActivateInstance([in] INT64 hwnd, [out] [retval] Microsoft.UI.Composition.Private.TransformInformation** result);
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                [uuid(935C8A2C-30C7-5845-A9E5-A4877AFBFCA5)]
                interface IVisualElementPartner : IInspectable
                {
                    [propget] HRESULT VisualInternal([out] [retval] Microsoft.UI.Composition.Visual** value);
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                [uuid(EA55BB33-72D8-596B-A2DF-15A7921BEFA7)]
                interface IVisualPrivate : IInspectable
                {
                    [propget] HRESULT DepthMode([out] [retval] Microsoft.UI.Composition.Private.CompositionDepthMode* value);
                    [propput] HRESULT DepthMode([in] Microsoft.UI.Composition.Private.CompositionDepthMode value);
                    [propget] HRESULT DisconnectChildrenOnDestroy([out] [retval] boolean* value);
                    [propput] HRESULT DisconnectChildrenOnDestroy([in] boolean value);
                    [propget] HRESULT IsTransparentForInput([out] [retval] boolean* value);
                    [propput] HRESULT IsTransparentForInput([in] boolean value);
                    [propget] HRESULT ProtectContents([out] [retval] boolean* value);
                    [propput] HRESULT ProtectContents([in] boolean value);
                    [propget] HRESULT UpVectorOverride([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                    [propput] HRESULT UpVectorOverride([in] Windows.Foundation.Numerics.Vector3 value);
                    HRESULT AttachMouseDragToHwnd([in] INT64 hwnd, [in] boolean enable);
                    HRESULT AttachMouseWheelToHwnd([in] INT64 hwnd, [in] boolean enable);
                    HRESULT CaptureOverrideSDRBoostAsync([in] Microsoft.UI.Composition.Visual* propertyVisual, [in] Microsoft.UI.Composition.CompositionGraphicsDevice* graphicsDevice, [in] INT32 width, [in] INT32 height, [in] Windows.Graphics.DirectX.DirectXPixelFormat pixelFormat, [in] Windows.Graphics.DirectX.DirectXAlphaMode alphaMode, [in] FLOAT sdrBoost, [out] [retval] Windows.Foundation.IAsyncOperation<Microsoft.UI.Composition.ICompositionSurface*>** operation);
                    HRESULT GetClosedEventHandle([out] [retval] INT64* result);
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                [uuid(3292FF4B-6ECE-52F3-B0B2-D58034E840AE)]
                interface IVisualTreeIslandDesktopPartner : IInspectable
                {
                    [propget] HRESULT DesktopOffset([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                    HRESULT EnableDesktopOffset();
                    HRESULT DisableDesktopOffset();
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                [uuid(D5757CFE-7F82-5198-8335-62A57AF61B5F)]
                interface IVisualTreeIslandPartner : IInspectable
                {
                    [propget] HRESULT ContentVisual([out] [retval] Microsoft.UI.Composition.Visual** value);
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                runtimeclass CompositionCubeMap
                {
                    [default] [experimental] interface Microsoft.UI.Composition.Private.ICompositionCubeMap;
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass CompositionSkyBoxBrush : Microsoft.UI.Composition.CompositionBrush
                {
                    [default] [experimental] interface Microsoft.UI.Composition.Private.ICompositionSkyBoxBrush;
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass DataSourceReader : Microsoft.UI.Composition.CompositionObject
                {
                    [default] [experimental] interface Microsoft.UI.Composition.Private.IDataSourceReader;
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass RectangleClip : Microsoft.UI.Composition.CompositionClip
                {
                    [default] [experimental] interface Microsoft.UI.Composition.Private.IRectangleClip;
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ScaleVisual : Microsoft.UI.Composition.ContainerVisual
                {
                    [default] [experimental] interface Microsoft.UI.Composition.Private.IScaleVisual;
                }

                [activatable(Microsoft.UI.Composition.Private.ITransformInformationFactory, Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                runtimeclass TransformInformation
                {
                    [default] [experimental] interface Microsoft.UI.Composition.Private.ITransformInformation;
                }

                [contract(Microsoft.UI.Composition.Private.LiftedPrivateContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                runtimeclass TransformInformationFactory
                {
                    [default] [experimental] interface Microsoft.UI.Composition.Private.ITransformInformationFactory;
                }
            }
        }
    }
}
